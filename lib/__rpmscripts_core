#!/bin/bash

# List given project's chroots:
# curl -s copr.fedorainfracloud.org//api_2/projects/$(curl -s copr.fedorainfracloud.org/api_2/projects?owner=dexpl'&name=misc' | jq '.projects[].project.id')/chroots | jq -r '.chroots[].chroot.name'
# (find a project id by its owner and name, then list chroots for that id)

__findspec () {
  [ -f "${specFile}" ] || specFile="${specFile}.spec"
  [ -f "${specFile}" ] || specFile="$(rpm -E %_specdir)/${specFile}"
}

# @param 1 string A package name to find the source url of
__findurl () {
  # If a package name is given, try to find its source url, otherwise just echo what's given assuming it's an url to .src.rpm already
  [ "$(basename "${1}")" == "${1}" ] && {
    yumdownloader=yumdownloader
    which dnf > /dev/null 2>&1 && yumdownloader="dnf download --urlprotocol http --urlprotocol https --urlprotocol ftp"
    ydOpts="--debuglevel 0 --source --urls"
    [ "${rawhide}" == "yes" ] && ydOpts="${ydOpts} --enablerepo rawhide" || {
      [ -n "${releaseVer}" ] && ydOpts="${ydOpts} --releasever ${releaseVer}"
    }
    ${yumdownloader} ${ydOpts} "${1}"
  } || echo "${1}"
}

__lint () {
  rpmlint -i ${specFile} || exit $?
}

_buildcopr () {
  [ "${findurl}" == "yes" ] && {
    nolint=yes
    renew=no
    srpmName=$(__findurl "${specFile}")
    } || {
# specFile can actually be an URL to .src.rpm
# if it is, just pass it to COPR
    [ "$(file -b --mime-type "${specFile}")" == "application/x-rpm" ] && {
      srpmName="${specFile}"
      nolint=yes
      } || {
      _buildsrpm
      srpmName="$(rpm -E %_srcrpmdir)/$(rpm -q --qf '%{nevr}\n' --specfile "${specFile}" | head -n 1).src.rpm"
      # Crappy crutch
      [ -f "${srpmName}" ] || srpmName="$(rpm -E %_srcrpmdir)/$(rpm -q --qf '%{nvr}\n' --specfile "${specFile}" | head -n 1).src.rpm"
    }
  }
  pkgName="$(rpm -q --qf '%{name}\n' "${srpmName}" | head -n 1)"
  projectName="${projectName:-${pkgName}}"
  [ -z "${nolint}" ] && __lint
  [ -n "${mockFirst}" ] && { _buildmock || exit $?; }
  [ "${renew}" == "yes" ] && copr delete-package "${projectName}" --name "${pkgName}"
  ${dryRun} copr build "${projectName}" "${srpmName}"
}

# TODO specify chroot(s) to build into
_buildmock () {
# TODO extremely dirty hack
[ "${projectName}" == "wannabe-epel" ] && mockopts="-r epel-7-x86_64"
  mock ${mockopts} "${srpmName}"
}

_buildsrpm () {
  __findspec
  spectool -g -R "${specFile}"
  rpmbuild -bs "${specFile}"
}

_getsrpm () {
  __findurl "${specFile}" | wget -i - -P $(rpm -E %_srcrpmdir)
}

_localbuild () {
  _buildsrpm
  rpmbuild -bb "${specFile}"
}

action=_$(basename "${0}")
[ "$(type -t "${action}")" = "function" ] || {
  echo "${action}: unknown action">&2
  exit 1
}

while getopts ":Lmnp:Rruw:x" opt
do
  case ${opt} in
    L) nolint=yes ;;
    m) mockFirst=yes ;;
    n) dryRun=echo ;;
    p) projectName=${OPTARG} ;;
    R) rawhide=yes ;;
    r) renew=yes ;;
    u) findurl=yes ;;
    x) set -x ;;
    w|\:)
      [ "${opt}" == "w" ] && {
        projectName=wannabe-epel
        releaseVer=${OPTARG//-/}
        } || {
        [ "${OPTARG}" == "w" ] || {
          echo "-${OPTARG} requires an argument">&2
          exit 1
        }
    } ;;
    *) echo "-${OPTARG}: unknown option">&2 ; exit 1 ;;
  esac
done

shift $((${OPTIND} - 1))

for specFile in $* ; do ${action} ; done
